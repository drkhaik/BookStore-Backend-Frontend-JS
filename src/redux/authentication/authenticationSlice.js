
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { fetchCount } from './counterAPI';
import { handleLogout } from '../../services/api';

const initialState = {
  isAuthenticated: false,
  isLoading: true,
  user: {
    avatar: "",
    email: "",
    fullName: "",
    id: "",
    phone: "",
    role: ""
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const handleLogoutReduxThunk = createAsyncThunk(
  'authentication/logoutAction',
  async () => {
    const response = await handleLogout();
    // The value we return becomes the `fulfilled` action payload
    console.log("check response", response.data)
    return response.data;
  }
);

export const authenticationSlice = createSlice({
  name: 'authentication',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loginAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = true;
      state.isLoading = false;
      state.user = action.payload;
    },

    fetchInfoUserAction: (state, action) => {
      state.isAuthenticated = true;
      state.isLoading = false;
      state.user = action.payload;
    },

    doUploadUserInfo: (state, action) => {
      state.user.avatar = action.payload.avatar;
      state.user.fullName = action.payload.fullName;
      state.user.phone = action.payload.phone;
    }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(handleLogoutReduxThunk.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(handleLogoutReduxThunk.fulfilled, (state, action) => {
        state.isLoading = false;
        localStorage.removeItem('access_token');
        state.isAuthenticated = false;
        state.user = {
          email: "",
          phone: "",
          fullName: "",
          role: "",
          avatar: "",
          id: ""
        }
      });
  },
});

export const { loginAction, fetchInfoUserAction, logoutAction, doUploadUserInfo } = authenticationSlice.actions;

export default authenticationSlice.reducer;
